// @generated by protobuf-ts 2.8.2 with parameter generate_dependencies,long_type_string,server_generic,client_generic
// @generated from protobuf file "proto/contacts/v1/contacts.proto" (package "proto.contacts.v1", syntax proto3)
// tslint:disable
import type {
  BinaryReadOptions,
  BinaryWriteOptions,
  IBinaryReader,
  IBinaryWriter,
  PartialMessage,
} from '@protobuf-ts/runtime';
import {
  MessageType,
  MESSAGE_TYPE,
  reflectionMergePartial,
  UnknownFieldHandler,
  WireType,
} from '@protobuf-ts/runtime';
import { ServiceType } from '@protobuf-ts/runtime-rpc';
import { Empty } from '../../../google/protobuf/empty';
/**
 * Describes a ListContacts request with paging information.
 *
 * @generated from protobuf message proto.contacts.v1.ListContactsRequest
 */
export interface ListContactsRequest {
  /** @generated from protobuf field: int32 page_size = 1; */
  pageSize: number;
  /** @generated from protobuf field: int32 page_number = 2; */
  pageNumber: number;
  /** @generated from protobuf field: string order_by = 3; */
  orderBy: string;
}
/**
 * Describes a ListContacts response with paging information.
 *
 * @generated from protobuf message proto.contacts.v1.ListContactsResponse
 */
export interface ListContactsResponse {
  /** @generated from protobuf field: repeated proto.contacts.v1.Contact contacts = 1; */
  contacts: Contact[];
  /** @generated from protobuf field: int32 page_size = 2; */
  pageSize: number;
  /** @generated from protobuf field: int32 page_number = 3; */
  pageNumber: number;
  /** @generated from protobuf field: string order_by = 4; */
  orderBy: string;
  /** @generated from protobuf field: int32 total_count = 5; */
  totalCount: number;
}
/**
 * Describes a GetContact request.
 *
 * @generated from protobuf message proto.contacts.v1.GetContactRequest
 */
export interface GetContactRequest {
  /** @generated from protobuf field: string uri = 1; */
  uri: string;
}
/**
 * Describes a GetContact response.
 *
 * @generated from protobuf message proto.contacts.v1.GetContactResponse
 */
export interface GetContactResponse {
  /** @generated from protobuf field: proto.contacts.v1.Contact contact = 1; */
  contact?: Contact;
}
/**
 * Describes an UpdateContact request.
 *
 * @generated from protobuf message proto.contacts.v1.UpdateContactRequest
 */
export interface UpdateContactRequest {
  /** @generated from protobuf field: proto.contacts.v1.Contact contact = 1; */
  contact?: Contact;
}
/**
 * Describes an UpdateContact response.
 *
 * @generated from protobuf message proto.contacts.v1.UpdateContactResponse
 */
export interface UpdateContactResponse {
  /** @generated from protobuf field: proto.contacts.v1.Contact contact = 1; */
  contact?: Contact;
}
/**
 * Describes a DeleteContact request.
 *
 * @generated from protobuf message proto.contacts.v1.DeleteContactRequest
 */
export interface DeleteContactRequest {
  /** @generated from protobuf field: string uri = 1; */
  uri: string;
}
/**
 * Describes a CreateContact request.
 *
 * @generated from protobuf message proto.contacts.v1.CreateContactRequest
 */
export interface CreateContactRequest {
  /** @generated from protobuf field: proto.contacts.v1.Contact contact = 1; */
  contact?: Contact;
}
/**
 * Describes a CreateContact response.
 *
 * @generated from protobuf message proto.contacts.v1.CreateContactResponse
 */
export interface CreateContactResponse {
  /** @generated from protobuf field: proto.contacts.v1.Contact contact = 1; */
  contact?: Contact;
}
/**
 * An individual contact item.
 *
 * @generated from protobuf message proto.contacts.v1.Contact
 */
export interface Contact {
  /** @generated from protobuf field: string uri = 1; */
  uri: string;
  /** @generated from protobuf field: string first_name = 2; */
  firstName: string;
  /** @generated from protobuf field: string last_name = 3; */
  lastName: string;
  /** @generated from protobuf field: string email = 4; */
  email: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListContactsRequest$Type extends MessageType<ListContactsRequest> {
  constructor() {
    super('proto.contacts.v1.ListContactsRequest', [
      { no: 1, name: 'page_size', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 2, name: 'page_number', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 3, name: 'order_by', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<ListContactsRequest>): ListContactsRequest {
    const message = { pageSize: 0, pageNumber: 0, orderBy: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListContactsRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListContactsRequest,
  ): ListContactsRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 page_size */ 1:
          message.pageSize = reader.int32();
          break;
        case /* int32 page_number */ 2:
          message.pageNumber = reader.int32();
          break;
        case /* string order_by */ 3:
          message.orderBy = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListContactsRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* int32 page_size = 1; */
    if (message.pageSize !== 0)
      writer.tag(1, WireType.Varint).int32(message.pageSize);
    /* int32 page_number = 2; */
    if (message.pageNumber !== 0)
      writer.tag(2, WireType.Varint).int32(message.pageNumber);
    /* string order_by = 3; */
    if (message.orderBy !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.orderBy);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/** @generated MessageType for protobuf message proto.contacts.v1.ListContactsRequest */
export const ListContactsRequest = new ListContactsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListContactsResponse$Type extends MessageType<ListContactsResponse> {
  constructor() {
    super('proto.contacts.v1.ListContactsResponse', [
      {
        no: 1,
        name: 'contacts',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Contact,
      },
      { no: 2, name: 'page_size', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 3, name: 'page_number', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 4, name: 'order_by', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: 'total_count', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
    ]);
  }
  create(value?: PartialMessage<ListContactsResponse>): ListContactsResponse {
    const message = {
      contacts: [],
      pageSize: 0,
      pageNumber: 0,
      orderBy: '',
      totalCount: 0,
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListContactsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListContactsResponse,
  ): ListContactsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated proto.contacts.v1.Contact contacts */ 1:
          message.contacts.push(
            Contact.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* int32 page_size */ 2:
          message.pageSize = reader.int32();
          break;
        case /* int32 page_number */ 3:
          message.pageNumber = reader.int32();
          break;
        case /* string order_by */ 4:
          message.orderBy = reader.string();
          break;
        case /* int32 total_count */ 5:
          message.totalCount = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListContactsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated proto.contacts.v1.Contact contacts = 1; */
    for (let i = 0; i < message.contacts.length; i++)
      Contact.internalBinaryWrite(
        message.contacts[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* int32 page_size = 2; */
    if (message.pageSize !== 0)
      writer.tag(2, WireType.Varint).int32(message.pageSize);
    /* int32 page_number = 3; */
    if (message.pageNumber !== 0)
      writer.tag(3, WireType.Varint).int32(message.pageNumber);
    /* string order_by = 4; */
    if (message.orderBy !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.orderBy);
    /* int32 total_count = 5; */
    if (message.totalCount !== 0)
      writer.tag(5, WireType.Varint).int32(message.totalCount);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/** @generated MessageType for protobuf message proto.contacts.v1.ListContactsResponse */
export const ListContactsResponse = new ListContactsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetContactRequest$Type extends MessageType<GetContactRequest> {
  constructor() {
    super('proto.contacts.v1.GetContactRequest', [
      { no: 1, name: 'uri', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<GetContactRequest>): GetContactRequest {
    const message = { uri: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetContactRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetContactRequest,
  ): GetContactRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string uri */ 1:
          message.uri = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetContactRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string uri = 1; */
    if (message.uri !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.uri);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/** @generated MessageType for protobuf message proto.contacts.v1.GetContactRequest */
export const GetContactRequest = new GetContactRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetContactResponse$Type extends MessageType<GetContactResponse> {
  constructor() {
    super('proto.contacts.v1.GetContactResponse', [
      { no: 1, name: 'contact', kind: 'message', T: () => Contact },
    ]);
  }
  create(value?: PartialMessage<GetContactResponse>): GetContactResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetContactResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetContactResponse,
  ): GetContactResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* proto.contacts.v1.Contact contact */ 1:
          message.contact = Contact.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.contact,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetContactResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* proto.contacts.v1.Contact contact = 1; */
    if (message.contact)
      Contact.internalBinaryWrite(
        message.contact,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/** @generated MessageType for protobuf message proto.contacts.v1.GetContactResponse */
export const GetContactResponse = new GetContactResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateContactRequest$Type extends MessageType<UpdateContactRequest> {
  constructor() {
    super('proto.contacts.v1.UpdateContactRequest', [
      { no: 1, name: 'contact', kind: 'message', T: () => Contact },
    ]);
  }
  create(value?: PartialMessage<UpdateContactRequest>): UpdateContactRequest {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateContactRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateContactRequest,
  ): UpdateContactRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* proto.contacts.v1.Contact contact */ 1:
          message.contact = Contact.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.contact,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UpdateContactRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* proto.contacts.v1.Contact contact = 1; */
    if (message.contact)
      Contact.internalBinaryWrite(
        message.contact,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/** @generated MessageType for protobuf message proto.contacts.v1.UpdateContactRequest */
export const UpdateContactRequest = new UpdateContactRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateContactResponse$Type extends MessageType<UpdateContactResponse> {
  constructor() {
    super('proto.contacts.v1.UpdateContactResponse', [
      { no: 1, name: 'contact', kind: 'message', T: () => Contact },
    ]);
  }
  create(value?: PartialMessage<UpdateContactResponse>): UpdateContactResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateContactResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateContactResponse,
  ): UpdateContactResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* proto.contacts.v1.Contact contact */ 1:
          message.contact = Contact.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.contact,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UpdateContactResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* proto.contacts.v1.Contact contact = 1; */
    if (message.contact)
      Contact.internalBinaryWrite(
        message.contact,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/** @generated MessageType for protobuf message proto.contacts.v1.UpdateContactResponse */
export const UpdateContactResponse = new UpdateContactResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteContactRequest$Type extends MessageType<DeleteContactRequest> {
  constructor() {
    super('proto.contacts.v1.DeleteContactRequest', [
      { no: 1, name: 'uri', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<DeleteContactRequest>): DeleteContactRequest {
    const message = { uri: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<DeleteContactRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DeleteContactRequest,
  ): DeleteContactRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string uri */ 1:
          message.uri = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DeleteContactRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string uri = 1; */
    if (message.uri !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.uri);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/** @generated MessageType for protobuf message proto.contacts.v1.DeleteContactRequest */
export const DeleteContactRequest = new DeleteContactRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateContactRequest$Type extends MessageType<CreateContactRequest> {
  constructor() {
    super('proto.contacts.v1.CreateContactRequest', [
      { no: 1, name: 'contact', kind: 'message', T: () => Contact },
    ]);
  }
  create(value?: PartialMessage<CreateContactRequest>): CreateContactRequest {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CreateContactRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateContactRequest,
  ): CreateContactRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* proto.contacts.v1.Contact contact */ 1:
          message.contact = Contact.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.contact,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateContactRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* proto.contacts.v1.Contact contact = 1; */
    if (message.contact)
      Contact.internalBinaryWrite(
        message.contact,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/** @generated MessageType for protobuf message proto.contacts.v1.CreateContactRequest */
export const CreateContactRequest = new CreateContactRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateContactResponse$Type extends MessageType<CreateContactResponse> {
  constructor() {
    super('proto.contacts.v1.CreateContactResponse', [
      { no: 1, name: 'contact', kind: 'message', T: () => Contact },
    ]);
  }
  create(value?: PartialMessage<CreateContactResponse>): CreateContactResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CreateContactResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateContactResponse,
  ): CreateContactResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* proto.contacts.v1.Contact contact */ 1:
          message.contact = Contact.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.contact,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateContactResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* proto.contacts.v1.Contact contact = 1; */
    if (message.contact)
      Contact.internalBinaryWrite(
        message.contact,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/** @generated MessageType for protobuf message proto.contacts.v1.CreateContactResponse */
export const CreateContactResponse = new CreateContactResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Contact$Type extends MessageType<Contact> {
  constructor() {
    super('proto.contacts.v1.Contact', [
      { no: 1, name: 'uri', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'first_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'last_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'email', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<Contact>): Contact {
    const message = { uri: '', firstName: '', lastName: '', email: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<Contact>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Contact,
  ): Contact {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string uri */ 1:
          message.uri = reader.string();
          break;
        case /* string first_name */ 2:
          message.firstName = reader.string();
          break;
        case /* string last_name */ 3:
          message.lastName = reader.string();
          break;
        case /* string email */ 4:
          message.email = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Contact,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string uri = 1; */
    if (message.uri !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.uri);
    /* string first_name = 2; */
    if (message.firstName !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.firstName);
    /* string last_name = 3; */
    if (message.lastName !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.lastName);
    /* string email = 4; */
    if (message.email !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.email);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/** @generated MessageType for protobuf message proto.contacts.v1.Contact */
export const Contact = new Contact$Type();
/** @generated ServiceType for protobuf service proto.contacts.v1.ContactsService */
export const ContactsService = new ServiceType(
  'proto.contacts.v1.ContactsService',
  [
    {
      name: 'ListContacts',
      options: {},
      I: ListContactsRequest,
      O: ListContactsResponse,
    },
    {
      name: 'GetContact',
      options: {},
      I: GetContactRequest,
      O: GetContactResponse,
    },
    {
      name: 'UpdateContact',
      options: {},
      I: UpdateContactRequest,
      O: UpdateContactResponse,
    },
    { name: 'DeleteContact', options: {}, I: DeleteContactRequest, O: Empty },
    {
      name: 'CreateContact',
      options: {},
      I: CreateContactRequest,
      O: CreateContactResponse,
    },
  ],
);
